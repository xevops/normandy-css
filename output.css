@charset "UTF-8";
/*!
 * Calidae CSS Boilerplate v1.0.0
 * https://bitbucket.org/calidae/calidae-css
 */
/**
 * Calidae CSS Boilerplate follows a ITCSS architecture and BEM class naming.
 * Read README.md for further details.
 */
/* ==========================================================================
   SETTINGS
   ========================================================================== */
/**
 * This layer defines all the global variables and configuration settings.
 * Please notice that these are global scoped variables, such as font sizes,
 * colors, responsive breakpoints.
 *
 * Try to keep every file short and clean.
 *
 * Place component or object specific settings within its own file so they are
 * more modular and we achieve a higher separation of concerns.
 */
/* ==========================================================================
   GLOBAL SETTINGS
   ========================================================================== */
/**
 * The global settings file contains any project-wide variables; things that
 * need to be made available to the entire codebase.
 */
/* ==========================================================================
   SIZE SETTINGS
   ========================================================================== */
/**
 * Font-size and spacing settings. These values should be defined soon and
 * be modified with caution.
 */
/**
 * Base typographical styles and baseline grid. Make sure you define these
 * values in pixels: they will converted to more appropriate units.
 */
/**
 * How many times larger/smaller than the default should the spacing unit
 * variants be? Make them unitless.
 */
/**
 * This will give us variables to create spacing values such as padding and
 * margin utilities and mantain vertical rythm across the project.
 */
/* ==========================================================================
   COLORS SETTINGS
   ========================================================================== */
/**
 * Branding colors.
 */
/**
 * Notification colors.
 */
/* ==========================================================================
   WIDTH SETTINGS
   ========================================================================== */
/**
 * Which fractions will Normandy use to generate width modifiers for the
 * Grid Object and the width utility classes (.u-1/2).
 */
/* ==========================================================================
   TOOLS
   ========================================================================== */
/**
 * This layer defines site-wide mixins and functions.
 *
 * Please notice that both Settings and Tools should not output any compiled
 * CSS code.
 */
/* ==========================================================================
   MATH TOOLS
   ========================================================================== */
/**
 * Simple math functions.
 *
 * .foo {
 *   padding: halve(20px);
 *   margin: double($space);
 * }
 */
/* ==========================================================================
   CLEARFIX TOOLS
   ========================================================================== */
/**
 * Mixin to add clearfix into a selector. Further reading:
 * http://www.cssmojo.com/the-very-latest-clearfix-reloaded/
 *
 * .foo {
 *   @include clearfix();
 * }
 */
/* ==========================================================================
   FONT-SIZE TOOLS
   ========================================================================== */
/**
 * Mixin to add font-size to an element.
 * It automatically converts `px` units into `rem` values and also `px` values
 * for old IEs not supporting `rem` values.
 *
 * Rule of thumb: Use rem units unless you’re sure you need em units, including
 * on font sizes. More info: https://goo.gl/BGG47K.
 *
 *
 * .foo {
 *   @include font-size();
 * }
 *
 * .bar {
 *   @include font-size(32px);
 * }
 */
body:before {
  background-color: #FCF8E3;
  border-bottom: 1px solid #FBEED5;
  border-left: 1px solid #FBEED5;
  color: #C09853;
  font: small-caption;
  padding: 3px 6px;
  pointer-events: none;
  position: fixed;
  right: 0;
  top: 0;
  z-index: 100; }
  @media (min-width: 30em) {
    body:before {
      content: "mobile ≥ 480px (30em)"; } }
  @media (min-width: 48em) {
    body:before {
      content: "tablet ≥ 768px (48em)"; } }
  @media (min-width: 64em) {
    body:before {
      content: "desktop ≥ 1024px (64em)"; } }
  @media (min-width: 77.5em) {
    body:before {
      content: "wide ≥ 1240px (77.5em)"; } }
  @media (min-width: 103.125em) {
    body:before {
      content: "full ≥ 1650px (103.125em)"; } }

/* ==========================================================================
   GENERIC
   ========================================================================== */
/**
 * Low-specificity, far-reaching rulesets such as resets.
 *
 * This is the first layer which generates actual CSS.
 */
/* ==========================================================================
   BOX-SIZING
   ========================================================================== */
/**
 * More sensible default box-sizing:
 * css-tricks.com/inheriting-box-sizing-probably-slightly-better-best-practice
 */
html {
  box-sizing: border-box; }

*, *::before, *::after {
  box-sizing: inherit; }

/*! normalize.css v7.0.0 | MIT License | github.com/necolas/normalize.css */
/* Document
   ========================================================================== */
/**
 * 1. Correct the line height in all browsers.
 * 2. Prevent adjustments of font size after orientation changes in
 *    IE on Windows Phone and in iOS.
 */
html {
  line-height: 1.15;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/* Sections
   ========================================================================== */
/**
 * Remove the margin in all browsers (opinionated).
 */
body {
  margin: 0; }

/**
 * Add the correct display in IE 9-.
 */
article,
aside,
footer,
header,
nav,
section {
  display: block; }

/**
 * Correct the font size and margin on `h1` elements within `section` and
 * `article` contexts in Chrome, Firefox, and Safari.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0; }

/* Grouping content
   ========================================================================== */
/**
 * Add the correct display in IE 9-.
 * 1. Add the correct display in IE.
 */
figcaption,
figure,
main {
  /* 1 */
  display: block; }

/**
 * Add the correct margin in IE 8.
 */
figure {
  margin: 1em 40px; }

/**
 * 1. Add the correct box sizing in Firefox.
 * 2. Show the overflow in Edge and IE.
 */
hr {
  box-sizing: content-box;
  /* 1 */
  height: 0;
  /* 1 */
  overflow: visible;
  /* 2 */ }

/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */
pre {
  font-family: monospace, monospace;
  /* 1 */
  font-size: 1em;
  /* 2 */ }

/* Text-level semantics
   ========================================================================== */
/**
 * 1. Remove the gray background on active links in IE 10.
 * 2. Remove gaps in links underline in iOS 8+ and Safari 8+.
 */
a {
  background-color: transparent;
  /* 1 */
  -webkit-text-decoration-skip: objects;
  /* 2 */ }

/**
 * 1. Remove the bottom border in Chrome 57- and Firefox 39-.
 * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.
 */
abbr[title] {
  border-bottom: none;
  /* 1 */
  text-decoration: underline;
  /* 2 */
  text-decoration: underline dotted;
  /* 2 */ }

/**
 * Prevent the duplicate application of `bolder` by the next rule in Safari 6.
 */
b,
strong {
  font-weight: inherit; }

/**
 * Add the correct font weight in Chrome, Edge, and Safari.
 */
b,
strong {
  font-weight: bolder; }

/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */
code,
kbd,
samp {
  font-family: monospace, monospace;
  /* 1 */
  font-size: 1em;
  /* 2 */ }

/**
 * Add the correct font style in Android 4.3-.
 */
dfn {
  font-style: italic; }

/**
 * Add the correct background and color in IE 9-.
 */
mark {
  background-color: #ff0;
  color: #000; }

/**
 * Add the correct font size in all browsers.
 */
small {
  font-size: 80%; }

/**
 * Prevent `sub` and `sup` elements from affecting the line height in
 * all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sub {
  bottom: -0.25em; }

sup {
  top: -0.5em; }

/* Embedded content
   ========================================================================== */
/**
 * Add the correct display in IE 9-.
 */
audio,
video {
  display: inline-block; }

/**
 * Add the correct display in iOS 4-7.
 */
audio:not([controls]) {
  display: none;
  height: 0; }

/**
 * Remove the border on images inside links in IE 10-.
 */
img {
  border-style: none; }

/**
 * Hide the overflow in IE.
 */
svg:not(:root) {
  overflow: hidden; }

/* Forms
   ========================================================================== */
/**
 * 1. Change the font styles in all browsers (opinionated).
 * 2. Remove the margin in Firefox and Safari.
 */
button,
input,
optgroup,
select,
textarea {
  font-family: sans-serif;
  /* 1 */
  font-size: 100%;
  /* 1 */
  line-height: 1.15;
  /* 1 */
  margin: 0;
  /* 2 */ }

/**
 * Show the overflow in IE.
 * 1. Show the overflow in Edge.
 */
button,
input {
  /* 1 */
  overflow: visible; }

/**
 * Remove the inheritance of text transform in Edge, Firefox, and IE.
 * 1. Remove the inheritance of text transform in Firefox.
 */
button,
select {
  /* 1 */
  text-transform: none; }

/**
 * 1. Prevent a WebKit bug where (2) destroys native `audio` and `video`
 *    controls in Android 4.
 * 2. Correct the inability to style clickable types in iOS and Safari.
 */
button,
html [type="button"],
[type="reset"],
[type="submit"] {
  -webkit-appearance: button;
  /* 2 */ }

/**
 * Remove the inner border and padding in Firefox.
 */
button::-moz-focus-inner,
[type="button"]::-moz-focus-inner,
[type="reset"]::-moz-focus-inner,
[type="submit"]::-moz-focus-inner {
  border-style: none;
  padding: 0; }

/**
 * Restore the focus styles unset by the previous rule.
 */
button:-moz-focusring,
[type="button"]:-moz-focusring,
[type="reset"]:-moz-focusring,
[type="submit"]:-moz-focusring {
  outline: 1px dotted ButtonText; }

/**
 * Correct the padding in Firefox.
 */
fieldset {
  padding: 0.35em 0.75em 0.625em; }

/**
 * 1. Correct the text wrapping in Edge and IE.
 * 2. Correct the color inheritance from `fieldset` elements in IE.
 * 3. Remove the padding so developers are not caught out when they zero out
 *    `fieldset` elements in all browsers.
 */
legend {
  box-sizing: border-box;
  /* 1 */
  color: inherit;
  /* 2 */
  display: table;
  /* 1 */
  max-width: 100%;
  /* 1 */
  padding: 0;
  /* 3 */
  white-space: normal;
  /* 1 */ }

/**
 * 1. Add the correct display in IE 9-.
 * 2. Add the correct vertical alignment in Chrome, Firefox, and Opera.
 */
progress {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */ }

/**
 * Remove the default vertical scrollbar in IE.
 */
textarea {
  overflow: auto; }

/**
 * 1. Add the correct box sizing in IE 10-.
 * 2. Remove the padding in IE 10-.
 */
[type="checkbox"],
[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Correct the cursor style of increment and decrement buttons in Chrome.
 */
[type="number"]::-webkit-inner-spin-button,
[type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
 * 1. Correct the odd appearance in Chrome and Safari.
 * 2. Correct the outline style in Safari.
 */
[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  outline-offset: -2px;
  /* 2 */ }

/**
 * Remove the inner padding and cancel buttons in Chrome and Safari on macOS.
 */
[type="search"]::-webkit-search-cancel-button,
[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
 * 1. Correct the inability to style clickable types in iOS and Safari.
 * 2. Change font properties to `inherit` in Safari.
 */
::-webkit-file-upload-button {
  -webkit-appearance: button;
  /* 1 */
  font: inherit;
  /* 2 */ }

/* Interactive
   ========================================================================== */
/*
 * Add the correct display in IE 9-.
 * 1. Add the correct display in Edge, IE, and Firefox.
 */
details,
menu {
  display: block; }

/*
 * Add the correct display in all browsers.
 */
summary {
  display: list-item; }

/* Scripting
   ========================================================================== */
/**
 * Add the correct display in IE 9-.
 */
canvas {
  display: inline-block; }

/**
 * Add the correct display in IE.
 */
template {
  display: none; }

/* Hidden
   ========================================================================== */
/**
 * Add the correct display in IE 10-.
 */
[hidden] {
  display: none; }

/* ==========================================================================
   RESET
   ========================================================================== */
/**
 * A very simple reset that sits on top of Normalize.css.
 */
/* stylelint-disable selector-list-comma-newline-after */
body,
h1, h2, h3, h4, h5, h6,
blockquote, p, pre,
dl, dd, ol, ul,
figure,
hr,
fieldset, legend {
  margin: 0;
  padding: 0; }

/**
 * Remove trailing margins from nested lists.
 */
li > ol,
li > ul {
  margin-bottom: 0; }

/**
 * Remove default table spacing.
 */
table {
  border-collapse: collapse;
  border-spacing: 0; }

/**
 * 1. Reset Chrome and Firefox behaviour which sets a `min-width: min-content;`
 *    on fieldsets.
 */
fieldset {
  min-width: 0;
  /* [1] */
  border: 0; }

/* stylelint-enable selector-list-comma-newline-after */
/* ==========================================================================
   BASE
   ========================================================================== */
/**
 * Contains classless styling, i.e., how a <h1> would look without any class.
 *
 * Attributes on this layer are usually configured on early stages of a
 * project and are not modified later.
 */
/* ==========================================================================
   IMAGE ELEMENT
   ========================================================================== */
/**
 * 1. Fluid images for responsive purposes.
 * 2. Offset `alt` text from surrounding copy.
 * 3. Setting `vertical-align` removes the whitespace that appears under `img`
 *    elements when they are dropped into a page as-is.
 */
img {
  max-width: 100%;
  /* [1] */
  font-style: italic;
  /* [2] */
  vertical-align: middle;
  /* [3] */ }

/**
 * 1. If a `width` and/or `height` attribute have been explicitly defined, let’s
 *    not make the image fluid.
 */
/* stylelint-disable selector-no-qualifying-type */
img[width],
img[height] {
  /* [1] */
  max-width: none; }

/* stylelint-enable selector-no-qualifying-type */
/* ==========================================================================
   PAGE ELEMENT
   ========================================================================== */
/**
 * Simple page-level setup.
 *
 * 1. Set the default `font-size` and `line-height` for the entire project,
 *    sourced from our default variables. The `font-size` is calculated to exist
 *    in ems, the `line-height` is calculated to exist unitlessly.
 * 2. Force scrollbars to always be visible to prevent awkward ‘jumps’ when
 *    navigating between pages that do/do not have enough content to produce
 *    scrollbars naturally.
 * 3. Ensure the page always fills at least the entire height of the viewport.
 */
html {
  font-size: 1em;
  /* [1] */
  line-height: 1.5;
  /* [1] */
  overflow-y: scroll;
  /* [2] */
  min-height: 100%;
  /* [3] */ }

/* ==========================================================================
   PAGE ELEMENT
   ========================================================================== */
/**
 * Anything else than defining a font-size would be too much opinion for a
 * boilerplate.
 */
h1 {
  font-size: 32px;
  font-size: 2rem; }

h2 {
  font-size: 28px;
  font-size: 1.75rem; }

h3 {
  font-size: 24px;
  font-size: 1.5rem; }

h4 {
  font-size: 20px;
  font-size: 1.25rem; }

h5 {
  font-size: 18px;
  font-size: 1.125rem; }

h6 {
  font-size: 16px;
  font-size: 1rem; }

/* ==========================================================================
   OBJECTS
   ========================================================================== */
/**
 * Namespace: .o-classname
 *
 * Contains the implementation of various design patterns such as de famous
 * media object. Objects are abstract, so they have no specific UI
 * implementation. They help us abstract out the repetitive, shared and
 * purely structural aspects of the UI into reusable objects.
 *
 * The idea is to keep these cosmetic-free in order to keep them reusable
 * across component instances and, ultimately, across projects.
 * That's why you would want to chose agnostic names that aren't specific to
 * the type of object. For example, choose .o-box over .o-profile-box.
 *
 * Please be really careful if you need to modify any attribute of an Object.
 * You probably shouldn't.
 */
/* ==========================================================================
   MEDIA OBJECT
   ========================================================================== */
/**
 * Place any image- and text-like content side-by-side, as per:
 * https://goo.gl/MDV4HS
 *
 * The Flexbox version of the Media Objects allows it to behave as a flag,
 * placing the image both at the bottom or the center of the whole element.
 *
 * 1. Image vertically aligned at top by default.
 */
.o-media {
  display: flex;
  align-items: flex-start;
  /* [1] */ }

.o-media__img {
  margin-right: 24px; }
  .o-media__img > img {
    display: block; }

.o-media__body {
  flex: 1; }
  .o-media__body,
  .o-media__body > :last-child {
    margin-bottom: 0; }

/* Alignment variants.
========================================================================== */
/**
* Vertically align the image- and body-content differently.
*/
.o-media--center {
  align-items: center; }

.o-media--bottom {
  align-items: flex-end; }

/**
* Allows media img to stretch to fit the container.
*/
.o-media--stretch {
  align-items: stretch; }

/* Size variants.
   ========================================================================== */
/**
 * Modify the amount of space between our image and our text. We also have
 * reversible options for all available sizes.
 */
/* Gutterless media objects.
  ========================================================================== */
.o-media--flush > .o-media__img {
  margin-right: 0;
  margin-left: 0; }

.o-media--tiny > .o-media__img {
  margin-right: 6px; }
.o-media--tiny.o-media--reverse > .o-media__img {
  margin-right: 0;
  margin-left: 6px; }

.o-media--small > .o-media__img {
  margin-right: 12px; }
.o-media--small.o-media--reverse > .o-media__img {
  margin-right: 0;
  margin-left: 12px; }

.o-media--large > .o-media__img {
  margin-right: 48px; }
.o-media--large.o-media--reverse > .o-media__img {
  margin-right: 0;
  margin-left: 48px; }

.o-media--huge > .o-media__img {
  margin-right: 96px; }
.o-media--huge.o-media--reverse > .o-media__img {
  margin-right: 0;
  margin-left: 96px; }

/* Reversed media objects.
   ========================================================================== */
.o-media--reverse {
  flex-direction: row-reverse; }
  .o-media--reverse > .o-media__img {
    margin-right: 0;
    margin-left: 24px; }

/* ==========================================================================
   BLOCK OBJECT
   ========================================================================== */
/**
* Stacked image-with-text object. A simple abstraction to cover a very commonly
* occurring design pattern.
*/
.o-block {
  display: block;
  text-align: center; }

.o-block__img {
  margin-bottom: 24px;
  /* Size variants.
        ===================================================================== */ }
  .o-block--flush > .o-block__img {
    margin-bottom: 0; }
  .o-block--tiny > .o-block__img {
    margin-bottom: 6px; }
  .o-block--small > .o-block__img {
    margin-bottom: 12px; }
  .o-block--large > .o-block__img {
    margin-bottom: 48px; }
  .o-block--huge > .o-block__img {
    margin-bottom: 96px; }

.o-block__body {
  display: block; }

/* Alignment variants.
========================================================================== */
.o-block--right {
  text-align: right; }

.o-block--left {
  text-align: left; }

/* ==========================================================================
   WRAPPER OBJECT
   ========================================================================== */
/**
 * Page-level constraining and wrapping elements.
 */
.o-wrapper {
  padding-right: 24px;
  padding-left: 24px;
  margin-right: auto;
  margin-left: auto;
  max-width: 1200px; }
  .o-wrapper::after {
    content: "" !important;
    display: block !important;
    clear: both !important; }

/* Size variants.
   ========================================================================== */
.o-wrapper--tiny {
  padding-right: 6px;
  padding-left: 6px; }

.o-wrapper--small {
  padding-right: 12px;
  padding-left: 12px; }

.o-wrapper--large {
  padding-right: 48px;
  padding-left: 48px; }

.o-wrapper--huge {
  padding-right: 96px;
  padding-left: 96px; }

/* ==========================================================================
   GRID OBJECT
   ========================================================================== */
/**
 * Grid-like layout system, the Flexbox way.
 *
 * Usually you'll want to combine the Grid Object with width modifiers such as:
 *
 *   <div class="o-grid">
 *     <div class="o-grid__item u-1/2">
 *     </div>
 *     <div class="o-grid__item u-1/2">
 *     </div>
 *   </div>
 *
 *
 * 1. Remove any leftover styling from lists.
 * 2. We need to defensively reset any box-model properties.
 * 3. Sets a basic gutter to place the items of the layout.
 * 4. Grid items can be flowed into multiple lines. Prevents overflow.
 */
.o-grid {
  display: flex;
  list-style: none;
  /* [1] */
  margin: 0;
  /* [2] */
  padding: 0;
  /* [2] */
  margin-left: -24px;
  /* [3] */
  flex-flow: row wrap;
  /* [4] */ }

/**
 * 1. Items will be size according to its size property (which can itself
 *    be auto, which then sizes the element based on its content).
 * 2. Gutter provided by left padding.
 */
.o-grid__item {
  flex: 0 0 auto;
  /* [1] */
  padding-left: 24px;
  /* [2] */ }

/* Display modifiers.
   ========================================================================== */
/**
 * This modifier makes every grid item to naturally space themsevles equally
 * and expand to fit the entire row.
 * This is really useful when we don't know how many items a grid will have or
 * when all grid items should have the same width.
 *
 * 1. We don't want items to expand to another row, but to fit the actual.
 * 2. Items just naturally space themselves equally and expand to fit the
 *    entire row.
 */
.o-grid--liquid {
  flex-wrap: nowrap;
  /* [1] */ }
  .o-grid--liquid > .o-grid__item {
    flex: 1;
    /* [2] */ }

/**
 * This modifier will equal height of siblings.
 */
.o-grid--stretch {
  align-items: stretch; }
  .o-grid--stretch > .o-grid__item {
    display: flex; }

/**
 * This modifier will sizes the item based on its width/height properties
 * (or its content if not set).
 *
 * 1. Same as `flex: 0 1 auto`
 */
.o-grid--auto > .o-grid__item {
  flex: initial;
  /* [1] */ }

/* Vertical alignment modifiers.
   ========================================================================== */
.o-grid--bottom {
  align-items: flex-end; }

.o-grid--middle {
  align-items: center; }

/* Gutter size modifiers.
   ========================================================================== */
.o-grid--flush {
  margin-left: 0; }
  .o-grid--flush > .o-grid__item {
    padding-left: 0; }

.o-grid--tiny {
  margin-left: -6px; }
  .o-grid--tiny > .o-grid__item {
    padding-left: 6px; }

.o-grid--small {
  margin-left: -12px; }
  .o-grid--small > .o-grid__item {
    padding-left: 12px; }

.o-grid--large {
  margin-left: -48px; }
  .o-grid--large > .o-grid__item {
    padding-left: 48px; }

.o-grid--huge {
  margin-left: -96px; }
  .o-grid--huge > .o-grid__item {
    padding-left: 96px; }

/* Space modifiers.
   ========================================================================== */
.o-grid--reverse {
  flex-direction: row-reverse; }

/* Space modifiers.
   ========================================================================== */
.o-grid--around {
  justify-content: space-around; }

.o-grid--between {
  justify-content: space-between; }

.o-grid--center {
  justify-content: center; }

.o-grid--end {
  justify-content: flex-end; }

/* Wrapper modifiers.
   ========================================================================== */
/**
 * Wrap items with a padding instead of using the padding as a column gutter.
 */
.o-grid--wrapped {
  margin-left: 0;
  /* Size variants. We need to update the values depending on size modifier.
    ========================================================================= */ }
  .o-grid--wrapped > .o-grid__item {
    padding: 24px;
    padding-left: 0; }
    .o-grid--wrapped > .o-grid__item:first-of-type {
      padding-left: 24px; }
  .o-grid--wrapped.o-grid--flush > .o-grid__item {
    padding: 0; }
  .o-grid--wrapped.o-grid--tiny > .o-grid__item {
    padding: 6px;
    padding-left: 0; }
    .o-grid--wrapped.o-grid--tiny > .o-grid__item:first-of-type {
      padding-left: 6px; }
  .o-grid--wrapped.o-grid--small > .o-grid__item {
    padding: 12px;
    padding-left: 0; }
    .o-grid--wrapped.o-grid--small > .o-grid__item:first-of-type {
      padding-left: 12px; }
  .o-grid--wrapped.o-grid--large > .o-grid__item {
    padding: 48px;
    padding-left: 0; }
    .o-grid--wrapped.o-grid--large > .o-grid__item:first-of-type {
      padding-left: 48px; }
  .o-grid--wrapped.o-grid--huge > .o-grid__item {
    padding: 96px;
    padding-left: 0; }
    .o-grid--wrapped.o-grid--huge > .o-grid__item:first-of-type {
      padding-left: 96px; }

/* ==========================================================================
   COVER OBJECT
   ========================================================================== */
/**
 * Place any text as a cover from an image.
 */
.o-cover {
  display: block; }

.o-cover__img {
  max-width: 100%;
  display: flex; }

/**
 * 1. Center the body into the parent element. More info about `margin: auto`
 *    https://hackernoon.com/flexbox-s-best-kept-secret-bd3d892826b6
 */
.o-cover__body {
  margin: auto;
  /* 1 */
  padding: 24px;
  /* Size variants.
        ===================================================================== */
  /* Alignment variants.
    ========================================================================= */
  /**
    * Vertically align the image- and body-content differently.
    */ }
  .o-cover--flush .o-cover__body {
    padding: 0; }
  .o-cover--tiny .o-cover__body {
    padding: 6px; }
  .o-cover--small .o-cover__body {
    padding: 12px; }
  .o-cover--large .o-cover__body {
    padding: 48px; }
  .o-cover--huge .o-cover__body {
    padding: 96px; }
  .o-cover--top .o-cover__body {
    margin-top: 0; }
  .o-cover--bottom .o-cover__body {
    margin-bottom: 0; }
  .o-cover--left .o-cover__body {
    margin-left: 0; }
  .o-cover--right .o-cover__body {
    margin-right: 0; }

/* ==========================================================================
   COMPONENTS
   ========================================================================== */
/**
 * Namespace: .c-classname
 *
 * Specific UI components.
 *
 * This is where the majority of the work takes place. since adding new
 * components and features usually makes up the vast majority of development.
 * UI components are often composed of Objects and Components.
 *
 * All of the changes made to a Component styles should be detectable in the
 * current context. Modifying these styles should be safe and have no side
 * effects.
 */
/* ==========================================================================
   UTILITIES
   ========================================================================== */
/**
 * Namespace: .u-classname
 *
 * The helpers, or “override” layer, should contain high-specificity selectors.
 * These are things like utility classes such as .u-hide, which can be reused
 * and are not tied to any specific piece of UI.
 *
 * VERY IMPORTANT: Please keep in mind the Single Responsibility Principle
 * when defining utility classes. Every class should do only one thing.
 * Utilities should be defined once, and never need changing.
 *
 * They are to be used as a last resort when no other CSS hooks are available,
 * or to tackle completely unique circumstances.
 *
 * They are only one step away from inline styles, so should be used sparingly.
 * If you are using a lot of utility classes you might be able to abstract them
 * out into a reusable Component or Object.
 */
/* ==========================================================================
   CLEARFIX UTILITY
   ========================================================================== */
/**
 * Attach our clearfix mixin to a utility class.
 */
.u-clearfix::after {
  content: "" !important;
  display: block !important;
  clear: both !important; }

/* ==========================================================================
   HIDE UTILITY
   ========================================================================== */
/**
 * Hide visually and from screen readers.
 */
.u-hidden {
  display: none !important; }

/* ==========================================================================
   PRINT UTILITIES
   ========================================================================== */
/**
 * Very crude, reset-like styles taken from the HTML5 Boilerplate:
 * https://github.com/h5bp/html5-boilerplate/blob/5.3.0/dist/doc/css.md
 * https://github.com/h5bp/html5-boilerplate/blob/master/dist/css/main.css
 */
/* stylelint-disable selector-no-qualifying-type */
@media print {
  /**
  * 1. Black prints faster: http://www.sanbeiji.com/archives/953
  */
  *,
  *::before,
  *::after,
  *::first-letter,
  *::first-line {
    background: transparent !important;
    color: #000 !important;
    /* [1] */
    box-shadow: none !important;
    text-shadow: none !important; }

  a,
  a:visited {
    text-decoration: underline; }

  a[href]::after {
    content: " (" attr(href) ")"; }

  abbr[title]::after {
    content: " (" attr(title) ")"; }

  /**
  * Don't show links that are fragment identifiers, or use the `javascript:`
  * pseudo protocol.
  */
  a[href^="#"]::after,
  a[href^="javascript:"]::after {
    content: ""; }

  pre,
  blockquote {
    border: 1px solid #999;
    page-break-inside: avoid; }

  /**
  * Printing Tables: http://css-discuss.incutio.com/wiki/Printing_Tables
  */
  thead {
    display: table-header-group; }

  tr,
  img {
    page-break-inside: avoid; }

  img {
    max-width: 100% !important; }

  p,
  h2,
  h3 {
    orphans: 3;
    widows: 3; }

  h2,
  h3 {
    page-break-after: avoid; } }
/* stylelint-enable selector-no-qualifying-type */
/* ==========================================================================
   SPACING UTILITIES
   ========================================================================== */
/**
 * Utility classes to put specific spacing values onto elements. The below loop
 * will generate us a suite of classes like:
 *
 *   .u-margin-top {}
 *   .u-padding-left-large {}
 *   .u-margin-right-small {}
 *   .u-padding {}
 *   .u-padding-right-none {}
 *   .u-padding-horizontal {}
 *   .u-padding-vertical-small {}
 *   .u-margin-auto {}
 */
/* stylelint-disable string-quotes */
.u-padding {
  padding: 24px !important; }

.u-padding-tiny {
  padding: 6px !important; }

.u-padding-small {
  padding: 12px !important; }

.u-padding-large {
  padding: 48px !important; }

.u-padding-huge {
  padding: 96px !important; }

.u-padding-none {
  padding: 0 !important; }

.u-padding-auto {
  padding: auto !important; }

.u-padding-top {
  padding-top: 24px !important; }

.u-padding-top-tiny {
  padding-top: 6px !important; }

.u-padding-top-small {
  padding-top: 12px !important; }

.u-padding-top-large {
  padding-top: 48px !important; }

.u-padding-top-huge {
  padding-top: 96px !important; }

.u-padding-top-none {
  padding-top: 0 !important; }

.u-padding-top-auto {
  padding-top: auto !important; }

.u-padding-right {
  padding-right: 24px !important; }

.u-padding-right-tiny {
  padding-right: 6px !important; }

.u-padding-right-small {
  padding-right: 12px !important; }

.u-padding-right-large {
  padding-right: 48px !important; }

.u-padding-right-huge {
  padding-right: 96px !important; }

.u-padding-right-none {
  padding-right: 0 !important; }

.u-padding-right-auto {
  padding-right: auto !important; }

.u-padding-bottom {
  padding-bottom: 24px !important; }

.u-padding-bottom-tiny {
  padding-bottom: 6px !important; }

.u-padding-bottom-small {
  padding-bottom: 12px !important; }

.u-padding-bottom-large {
  padding-bottom: 48px !important; }

.u-padding-bottom-huge {
  padding-bottom: 96px !important; }

.u-padding-bottom-none {
  padding-bottom: 0 !important; }

.u-padding-bottom-auto {
  padding-bottom: auto !important; }

.u-padding-left {
  padding-left: 24px !important; }

.u-padding-left-tiny {
  padding-left: 6px !important; }

.u-padding-left-small {
  padding-left: 12px !important; }

.u-padding-left-large {
  padding-left: 48px !important; }

.u-padding-left-huge {
  padding-left: 96px !important; }

.u-padding-left-none {
  padding-left: 0 !important; }

.u-padding-left-auto {
  padding-left: auto !important; }

.u-padding-horizontal {
  padding-left: 24px !important;
  padding-right: 24px !important; }

.u-padding-horizontal-tiny {
  padding-left: 6px !important;
  padding-right: 6px !important; }

.u-padding-horizontal-small {
  padding-left: 12px !important;
  padding-right: 12px !important; }

.u-padding-horizontal-large {
  padding-left: 48px !important;
  padding-right: 48px !important; }

.u-padding-horizontal-huge {
  padding-left: 96px !important;
  padding-right: 96px !important; }

.u-padding-horizontal-none {
  padding-left: 0 !important;
  padding-right: 0 !important; }

.u-padding-horizontal-auto {
  padding-left: auto !important;
  padding-right: auto !important; }

.u-padding-vertical {
  padding-top: 24px !important;
  padding-bottom: 24px !important; }

.u-padding-vertical-tiny {
  padding-top: 6px !important;
  padding-bottom: 6px !important; }

.u-padding-vertical-small {
  padding-top: 12px !important;
  padding-bottom: 12px !important; }

.u-padding-vertical-large {
  padding-top: 48px !important;
  padding-bottom: 48px !important; }

.u-padding-vertical-huge {
  padding-top: 96px !important;
  padding-bottom: 96px !important; }

.u-padding-vertical-none {
  padding-top: 0 !important;
  padding-bottom: 0 !important; }

.u-padding-vertical-auto {
  padding-top: auto !important;
  padding-bottom: auto !important; }

.u-margin {
  margin: 24px !important; }

.u-margin-tiny {
  margin: 6px !important; }

.u-margin-small {
  margin: 12px !important; }

.u-margin-large {
  margin: 48px !important; }

.u-margin-huge {
  margin: 96px !important; }

.u-margin-none {
  margin: 0 !important; }

.u-margin-auto {
  margin: auto !important; }

.u-margin-top {
  margin-top: 24px !important; }

.u-margin-top-tiny {
  margin-top: 6px !important; }

.u-margin-top-small {
  margin-top: 12px !important; }

.u-margin-top-large {
  margin-top: 48px !important; }

.u-margin-top-huge {
  margin-top: 96px !important; }

.u-margin-top-none {
  margin-top: 0 !important; }

.u-margin-top-auto {
  margin-top: auto !important; }

.u-margin-right {
  margin-right: 24px !important; }

.u-margin-right-tiny {
  margin-right: 6px !important; }

.u-margin-right-small {
  margin-right: 12px !important; }

.u-margin-right-large {
  margin-right: 48px !important; }

.u-margin-right-huge {
  margin-right: 96px !important; }

.u-margin-right-none {
  margin-right: 0 !important; }

.u-margin-right-auto {
  margin-right: auto !important; }

.u-margin-bottom {
  margin-bottom: 24px !important; }

.u-margin-bottom-tiny {
  margin-bottom: 6px !important; }

.u-margin-bottom-small {
  margin-bottom: 12px !important; }

.u-margin-bottom-large {
  margin-bottom: 48px !important; }

.u-margin-bottom-huge {
  margin-bottom: 96px !important; }

.u-margin-bottom-none {
  margin-bottom: 0 !important; }

.u-margin-bottom-auto {
  margin-bottom: auto !important; }

.u-margin-left {
  margin-left: 24px !important; }

.u-margin-left-tiny {
  margin-left: 6px !important; }

.u-margin-left-small {
  margin-left: 12px !important; }

.u-margin-left-large {
  margin-left: 48px !important; }

.u-margin-left-huge {
  margin-left: 96px !important; }

.u-margin-left-none {
  margin-left: 0 !important; }

.u-margin-left-auto {
  margin-left: auto !important; }

.u-margin-horizontal {
  margin-left: 24px !important;
  margin-right: 24px !important; }

.u-margin-horizontal-tiny {
  margin-left: 6px !important;
  margin-right: 6px !important; }

.u-margin-horizontal-small {
  margin-left: 12px !important;
  margin-right: 12px !important; }

.u-margin-horizontal-large {
  margin-left: 48px !important;
  margin-right: 48px !important; }

.u-margin-horizontal-huge {
  margin-left: 96px !important;
  margin-right: 96px !important; }

.u-margin-horizontal-none {
  margin-left: 0 !important;
  margin-right: 0 !important; }

.u-margin-horizontal-auto {
  margin-left: auto !important;
  margin-right: auto !important; }

.u-margin-vertical {
  margin-top: 24px !important;
  margin-bottom: 24px !important; }

.u-margin-vertical-tiny {
  margin-top: 6px !important;
  margin-bottom: 6px !important; }

.u-margin-vertical-small {
  margin-top: 12px !important;
  margin-bottom: 12px !important; }

.u-margin-vertical-large {
  margin-top: 48px !important;
  margin-bottom: 48px !important; }

.u-margin-vertical-huge {
  margin-top: 96px !important;
  margin-bottom: 96px !important; }

.u-margin-vertical-none {
  margin-top: 0 !important;
  margin-bottom: 0 !important; }

.u-margin-vertical-auto {
  margin-top: auto !important;
  margin-bottom: auto !important; }

/* stylelint-enable string-quotes */
/* ==========================================================================
   WIDTH UTILITY
   ========================================================================== */
/*
 * This will generate a series of utility classes that give a fluid width to
 * whichever element they’re applied, e.g.:
 *
 *   <img src="" alt="" class="u-1/2" />
 *
 * Remember that the Grid Object is using another classes to set its item
 * widths, so this utility classes are meant to be used with another elements
 * of the project.
 */
/**
* Loop through values and generate the classes.
*/
.u-1\/1 {
  width: 100% !important; }

.u-1\/2 {
  width: 50% !important; }

.u-2\/2 {
  width: 100% !important; }

.u-1\/3 {
  width: 33.33333% !important; }

.u-2\/3 {
  width: 66.66667% !important; }

.u-3\/3 {
  width: 100% !important; }

.u-1\/4 {
  width: 25% !important; }

.u-2\/4 {
  width: 50% !important; }

.u-3\/4 {
  width: 75% !important; }

.u-4\/4 {
  width: 100% !important; }

.u-1\/5 {
  width: 20% !important; }

.u-2\/5 {
  width: 40% !important; }

.u-3\/5 {
  width: 60% !important; }

.u-4\/5 {
  width: 80% !important; }

.u-5\/5 {
  width: 100% !important; }

.u-1\/6 {
  width: 16.66667% !important; }

.u-2\/6 {
  width: 33.33333% !important; }

.u-3\/6 {
  width: 50% !important; }

.u-4\/6 {
  width: 66.66667% !important; }

.u-5\/6 {
  width: 83.33333% !important; }

.u-6\/6 {
  width: 100% !important; }
